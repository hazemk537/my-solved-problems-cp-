/*
اللهم صل على نبينا محمد وعلى ال نبينا محمد
اللهم علم ينتفع به ونؤجر عليه       */

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
void start()
{
#define ll                  long long
#define inf                  2e18 + 10
#define cinn(n)              scanf("%lld", &n)
#define fr(i,n)             for (ll i=0;i<n;i++)
#define fr1(i,n)            for(ll i=1;i<=n;i++)
#define coutt(x)             printf("%lld\n",x)
#define endl 	            "\n"
#define pb                  push_back
#define asort(a)            sort(a,a+n)
#define agsort(a)            sort(a,a+n,greater<int>())
#define vsort(v)         sort(v.begin(), v.end());
#define vgsort(v)         sort(v.begin(), v.end(),greater<int>());
#define pn                  printf("\n")
#define md                  10000007
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
#endif
}
vector<long long>prefix(1000000);
vector<long long>data(1000000);
ordered_set os;
void prefix_sum(ll size_vector,vector<ll>&data)
{
    prefix[0]=data[0];
    fr1(i,size_vector)
    {
        prefix[i]=data[i]+prefix[i-1];
    }
}

int pairsum_two_pointers(vector<int>&A, int N, int X)
{
    int i = 0;
    // represents second pointer
    int j = N - 1;
    while (i < j)
    {
        if (A[i] + A[j] == X)
            return 1;
        else if (A[i] + A[j] < X)
            i++;
        else
            j--;
    }
    return 0;
}
ll n,k;
 bool validmidian(ll med,vector<ll>&data)
    {
        ll sum=0;
        for (int i=n/2; i<n; i++)
        {
    if (data[i]>=med)break;
//mid after sort the the smallest possible value if k=0 choose it if k=1 plus above it
            sum+=med-data[i];
        }
        return sum<=k;
    }
    ll bs(vector<ll>&data)
    {
        ll first=data[n/2];
        ll last=2e9;
        while(first<last)
        {
            ll mid=(first+last+1)/2;//1
            if(validmidian(mid,data))first=mid;
            else last=mid-1;
        }
        //first will stand on a number has the biggest median
        return first;
    }
int main()
{
    start();
    cin>>n>>k;
    vector<ll>data(n);
    fr(i,n) cin>>data[i];
    vsort(data);
    /*generate numbers from the mid (k==0-the smallest one ) to 2e9 (k==1e9)
    if this number can be a median using operations then a valid midian may be from med to 2e9
    else then operations is not suuficient to get this mrdian then a valid median may be     from low to mid-1*/

    cout<<bs(data);//this find median when k operations is applied
return 0;
}
